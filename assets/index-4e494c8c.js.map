{"version":3,"file":"index-4e494c8c.js","sources":["../../../src/components/atoms/Link/index.tsx"],"sourcesContent":["import type {\n  AnchorHTMLAttributes,\n  MouseEventHandler,\n  TouchEventHandler,\n} from 'react';\n\nimport { useTypographyClassName } from '@hooks';\nimport type { UseTypographyClassNameParams } from '@hooks';\nimport { Compatibility } from '@plugins';\nimport type { CompatibleLinkProps } from '@plugins';\nimport { cleanClassName } from '@utils';\n\nimport styles from './index.module.scss';\n\ntype LinkTypeElement = HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement;\n\nexport type LinkProps = Omit<\n  CompatibleLinkProps,\n  'className' | 'children' | 'to'\n> & {\n  color?:\n    | 'puple-550'\n    | 'puple-600'\n    | 'bluish-gray-600'\n    | 'bluish-gray-700'\n    | 'bluish-gray-800';\n\n  hoverType?: 'underline' | 'color-change' | 'none';\n  type?: 'button' | 'link' | 'span';\n  onMouseEnter?: MouseEventHandler<LinkTypeElement>;\n  onClick?: MouseEventHandler<LinkTypeElement>;\n  className?: string;\n  onTouchStart?: TouchEventHandler<LinkTypeElement>;\n  children?: React.ReactNode;\n  to?: string;\n  target?: AnchorHTMLAttributes<HTMLAnchorElement>['target'];\n} & UseTypographyClassNameParams;\n\n/**\n * @deprecated Next, React에 내장된 Anchor 확장 컴포넌트를 사용하세요.\n */\nexport const Link = ({\n  color = 'puple-550',\n  hoverType = 'underline',\n  fontSize,\n  fontWeight,\n  to,\n  replace,\n  type = 'link',\n  className,\n  children = <></>,\n  target,\n  ...restProps\n}: LinkProps) => {\n  const { typographyClassName } = useTypographyClassName({\n    fontSize,\n    fontWeight,\n  });\n\n  const commonProps = {\n    ...restProps,\n    children,\n    className: cleanClassName(\n      `${styles.link} ${styles[`color-${color}`]} ${\n        hoverType !== 'none' && styles[`hover-type-${hoverType}`]\n      } ${typographyClassName} ${className}`,\n    ),\n  };\n\n  switch (type) {\n    case 'button':\n      return <button {...commonProps} />;\n    case 'span':\n      return <span {...commonProps} />;\n    default: {\n      const linkProps = {\n        ...commonProps,\n        target,\n      };\n      return to ? (\n        <Compatibility.Link {...linkProps} to={to} replace={replace} />\n      ) : (\n        <a {...linkProps} />\n      );\n    }\n  }\n};\n"],"names":["Link","color","hoverType","fontSize","fontWeight","to","replace","type","className","children","jsx","Fragment","target","restProps","typographyClassName","useTypographyClassName","commonProps","cleanClassName","styles","linkProps","Compatibility"],"mappings":"m4CAyCOA,EAAA,CAAA,CAAc,MAAAC,EAAA,YACX,UAAAC,EAAA,YACI,SAAAC,EACZ,WAAAC,EACA,GAAAC,EACA,QAAAC,EACA,KAAAC,EAAA,OACO,UAAAC,EACP,SAAAC,EAAAC,EAAAA,IAAAC,EAAA,SAAA,EAAA,EACa,OAAAC,EACb,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,oBAAAC,CAAA,EAAAC,EAAA,CAAuD,SAAAZ,EACrD,WAAAC,CACA,CAAA,EAGFY,EAAA,CAAoB,GAAAH,EACf,SAAAJ,EACH,UAAAQ,EACW,GAAAC,EAAA,IAAA,IAAAA,EAAA,SAAAjB,CAAA,EAAA,CAAA,IAAAC,IAAA,QAAAgB,EAAA,cAAAhB,CAAA,EAAA,CAAA,IAAAY,CAAA,IAAAN,CAAA,EAG2B,CACtC,EAGF,OAAAD,EAAA,CAAc,IAAA,SAEV,OAAAG,EAAA,IAAA,SAAA,CAAA,GAAAM,CAAA,CAAA,EAAgC,IAAA,OAEhC,OAAAN,EAAA,IAAA,OAAA,CAAA,GAAAM,CAAA,CAAA,EAA8B,QAAA,CAE9B,MAAAG,EAAA,CAAkB,GAAAH,EACb,OAAAJ,CACH,EAEF,OAAAP,EAAAK,EAAAA,IAAAU,EAAA,KAAA,CAAA,GAAAD,EAAA,GAAAd,EAAA,QAAAC,CAAA,CAAA,EAAAI,EAAAA,IAAA,IAAA,CAAA,GAAAS,CAAA,CAAA,CAGoB,CAEtB,CAEJ"}