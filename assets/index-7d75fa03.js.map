{"version":3,"file":"index-7d75fa03.js","sources":["../../../node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/copy.js","../../../src/constants/INITIAL.ts","../../../src/contexts/TableContext.tsx","../../../src/components/molecules/Table/TableBody.tsx","../../../src/components/molecules/Table/TableCell.tsx","../../../src/components/molecules/Table/TableHeader.tsx","../../../src/components/molecules/Table/TableRow.tsx","../../../src/components/molecules/Table/TableTitle.tsx","../../../src/components/molecules/Table/index.tsx"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Copy = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"rect\", {\n    x: \"9\",\n    y: \"9\",\n    width: \"13\",\n    height: \"13\",\n    rx: \"2\",\n    ry: \"2\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"\n  }));\n});\nCopy.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCopy.displayName = 'Copy';\nexport default Copy;","export const INDEX = -1;\n","import { debounce } from 'lodash-es';\n\nimport type { ComponentType } from 'react';\nimport { createContext, useState, useMemo, useContext } from 'react';\n\nimport { INITIAL } from '@constants';\n\nexport interface ColumnData {\n  originalIndex: number;\n  width?: number;\n  maxWidth?: React.CSSProperties['maxWidth'];\n}\n\ntype ColumnDataListState = [\n  ColumnData[],\n  React.Dispatch<React.SetStateAction<ColumnData[]>>,\n];\n\ntype NumberState = [number, React.Dispatch<React.SetStateAction<number>>];\n\ntype BooleanState = [boolean, React.Dispatch<React.SetStateAction<boolean>>];\n\ninterface TableContextValue {\n  columnDataListState: ColumnDataListState;\n  draggingColumnIndexState: NumberState;\n  hoveredColumnIndexState: NumberState;\n  dropTargetColumnIndexState: NumberState;\n  fixedColumnCount: number;\n  isHorizontalScrolledState: BooleanState;\n  isReady: boolean;\n  storageKey?: string;\n}\n\nconst TableContext = createContext<TableContextValue | undefined>(undefined);\n\nexport type TableObserverProps = Partial<\n  Pick<TableContextValue, 'fixedColumnCount' | 'storageKey'>\n>;\n\nexport const tableDataObserver =\n  <T extends TableObserverProps>(TableComponent: ComponentType<T>) =>\n  // eslint-disable-next-line react/function-component-definition\n  (props: T) => {\n    const { fixedColumnCount = 0, storageKey } = props;\n\n    const columnDataListState = useState<ColumnData[]>([]);\n    const draggingColumnIndexState = useState<number>(INITIAL.INDEX);\n    const hoveredColumnIndexState = useState<number>(INITIAL.INDEX);\n    const dropTargetColumnIndexState = useState<number>(INITIAL.INDEX);\n    const [isReady, setIsReady] = useState<boolean>(false);\n\n    const ready = useMemo(\n      () =>\n        debounce(() => {\n          setIsReady(true);\n        }, 100),\n      [],\n    );\n\n    if (!isReady) {\n      ready();\n    }\n\n    const isHorizontalScrolledState = useState(false);\n\n    const tableContextValue = useMemo(\n      () => ({\n        columnDataListState,\n        draggingColumnIndexState,\n        hoveredColumnIndexState,\n        dropTargetColumnIndexState,\n        fixedColumnCount,\n        isHorizontalScrolledState,\n        storageKey,\n        isReady,\n      }),\n      [\n        columnDataListState,\n        draggingColumnIndexState,\n        dropTargetColumnIndexState,\n        fixedColumnCount,\n        hoveredColumnIndexState,\n        isHorizontalScrolledState,\n        storageKey,\n        isReady,\n      ],\n    );\n\n    return (\n      <TableContext.Provider value={tableContextValue}>\n        <TableComponent {...props} />\n      </TableContext.Provider>\n    );\n  };\n\nexport const useTableData = () => {\n  const tableContextValue = useContext(TableContext);\n  if (!tableContextValue) {\n    throw new Error('TableContext가 선언되지 않았습니다.');\n  }\n\n  return tableContextValue;\n};\n","export interface TableBodyProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const TableBody = ({ children, className }: TableBodyProps) => (\n  <tbody className={className}>{children}</tbody>\n);\n","import { useRef, useState } from 'react';\nimport { Copy } from 'react-feather';\nimport nodeToString from 'react-node-to-string';\n\nimport { Button } from '@components/atoms';\nimport { INITIAL } from '@constants';\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableCell.module.scss';\n\nexport interface TableCellProps {\n  className?: string;\n  children?: React.ReactNode;\n  onCopy?: (value: string) => void;\n  hoverStyle?: Pick<React.CSSProperties, 'maxHeight' | 'maxWidth'>;\n}\n\nexport const TableCell = ({\n  children,\n  onCopy,\n  className,\n  hoverStyle,\n}: TableCellProps) => {\n  const {\n    columnDataListState: [columnDataList],\n    hoveredColumnIndexState: [hoveredColumnIndex],\n    draggingColumnIndexState: [draggingColumnIndex],\n    dropTargetColumnIndexState: [dropTargetColumnIndex],\n    isHorizontalScrolledState: [isHorizontalScrolled],\n    fixedColumnCount,\n    isReady,\n  } = useTableData();\n\n  const ref = useRef<HTMLTableCellElement>(null);\n  const currentIndex = ref.current?.cellIndex ?? INITIAL.INDEX;\n\n  const { maxWidth } = columnDataList[currentIndex ?? 0] ?? {};\n\n  const left = columnDataList\n    .slice(0, currentIndex)\n    .reduce((acc, curr) => acc + (curr?.width ?? 0), 0);\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const isFixed = currentIndex < fixedColumnCount;\n  const isDropTarget = !isFixed && dropTargetColumnIndex === currentIndex;\n  const isDragging = !isFixed && draggingColumnIndex === currentIndex;\n  const isLastFixed = currentIndex === fixedColumnCount - 1;\n  const isTitleHovered = hoveredColumnIndex === currentIndex;\n  const [isOverflow, setOverflow] = useState(true);\n\n  const mouseEventHandler = isReady\n    ? {\n        onMouseEnter: (({ currentTarget }) => {\n          const isOverflow =\n            currentTarget.scrollWidth > currentTarget.clientWidth;\n\n          if (isOverflow || onCopy) {\n            setIsHovered(true);\n          }\n\n          if (!isOverflow) {\n            setOverflow(false);\n          }\n        }) satisfies React.MouseEventHandler<HTMLDivElement>,\n        onMouseLeave: () => setIsHovered(false),\n      }\n    : {};\n\n  return (\n    <td\n      ref={ref}\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.cell} ${isFixed && styles.fixed} ${\n          isLastFixed && isHorizontalScrolled && styles.shadow\n        } ${isTitleHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingColumnIndex ?? 0) > dropTargetColumnIndex\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${\n          isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n        } ${className}`,\n      )}\n    >\n      <div\n        {...mouseEventHandler}\n        style={{\n          maxWidth,\n        }}\n        className={`${styles['cell-content-container']} ${\n          isOverflow ? styles.overflow : styles['not-overflow']\n        }`}\n      >\n        {isHovered ? <div className={styles.hidden}>{children}</div> : children}\n        {isHovered ? (\n          <div\n            className={cleanClassName(\n              `${styles['hovered-cell-content-wrap']} ${\n                hoverStyle && styles['has-style']\n              }`,\n            )}\n            style={hoverStyle}\n          >\n            <div className={styles['hovered-cell-content']}>{children}</div>\n            {onCopy ? (\n              <div className={styles['copy-button-wrap']}>\n                <Button\n                  size=\"small3x\"\n                  shape=\"pill\"\n                  theme=\"bluish-gray700/0\"\n                  icon={<Copy size={14} />}\n                  onClick={() => {\n                    const childrenString = nodeToString(children);\n                    navigator.clipboard.writeText(childrenString);\n                    onCopy?.(childrenString);\n                  }}\n                />\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    </td>\n  );\n};\n","import { useEffect, Children } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableHeader.module.scss';\n\nexport interface TableHeaderProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const TableHeader = ({ children, className }: TableHeaderProps) => {\n  const {\n    columnDataListState: [columnDataList, setColumnDataList],\n    storageKey,\n  } = useTableData();\n  const titleCount = Children.count(children);\n\n  useEffect(() => {\n    const initialColumnDataList = Array.from(\n      {\n        length: titleCount,\n      },\n      (_, originalIndex) => ({\n        originalIndex,\n      }),\n    );\n\n    if (storageKey) {\n      const savedColumnIndexListString =\n        window.localStorage.getItem(storageKey);\n\n      if (savedColumnIndexListString) {\n        const savedColumnIndexList: number[] | undefined = JSON.parse(\n          savedColumnIndexListString,\n        );\n\n        if (savedColumnIndexList?.length !== titleCount) {\n          window.localStorage.removeItem(storageKey);\n        } else {\n          initialColumnDataList.forEach((columnData, originalIndex) => {\n            columnData.originalIndex = savedColumnIndexList[originalIndex];\n          });\n        }\n      }\n    }\n\n    setColumnDataList(initialColumnDataList);\n  }, [setColumnDataList, storageKey, titleCount]);\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <thead className={cleanClassName(`${styles.header} ${className}`)}>\n      <tr>\n        {columnDataList.map(\n          ({ originalIndex }) => childrenArray[originalIndex],\n        )}\n      </tr>\n    </thead>\n  );\n};\n","import { Children } from 'react';\n\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableRow.module.scss';\n\nexport interface TableRowProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const TableRow = ({ children, className }: TableRowProps) => {\n  const {\n    columnDataListState: [columnDataList],\n  } = useTableData();\n\n  const childrenArray = Children.toArray(children);\n\n  return (\n    <tr className={cleanClassName(`${styles.row} ${className}`)}>\n      {columnDataList.map(({ originalIndex }) => childrenArray[originalIndex])}\n    </tr>\n  );\n};\n","import { useRef, useEffect } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { INITIAL } from '@constants';\nimport { useTableData } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport styles from './TableTitle.module.scss';\n\ntype MaxWidth = React.CSSProperties['maxWidth'];\nexport interface TableTitleProps {\n  className?: string;\n  children?: ReactNode;\n  maxWidth?: MaxWidth;\n}\n\nexport const TableTitle = ({\n  children,\n  className,\n  maxWidth,\n}: TableTitleProps) => {\n  const {\n    columnDataListState: [columnDataList, setColumnDataList],\n    hoveredColumnIndexState: [hoveredColumnIndex, setHoveredColumnIndex],\n    draggingColumnIndexState: [draggingColumnIndex, setDraggingColumnIndex],\n    dropTargetColumnIndexState: [\n      dropTargetColumnIndex,\n      setDropTargetColumnIndex,\n    ],\n    fixedColumnCount,\n    isHorizontalScrolledState: [isHorizontalScrolled],\n    storageKey,\n  } = useTableData();\n\n  const ref = useRef<HTMLTableCellElement>(null);\n\n  useEffect(() => {\n    const currentIndex = ref.current?.cellIndex ?? INITIAL.INDEX;\n    if (currentIndex !== INITIAL.INDEX && ref.current) {\n      const isTrackingRequired = currentIndex < fixedColumnCount - 1;\n      const updateColumnWidth = (maxWidth: MaxWidth, width?: number) => {\n        setColumnDataList((prevColumnDataList) => {\n          const newColumnDataList = [...prevColumnDataList];\n          const columnData = newColumnDataList[currentIndex];\n          if (columnData) {\n            columnData.width = width;\n            columnData.maxWidth = maxWidth;\n          }\n\n          return newColumnDataList;\n        });\n      };\n\n      if (isTrackingRequired) {\n        const observer = new ResizeObserver(([entry]) => {\n          updateColumnWidth(maxWidth, entry.contentRect.width);\n        });\n\n        observer.observe(ref.current);\n\n        return () => observer.disconnect();\n      }\n\n      updateColumnWidth(maxWidth);\n    }\n  }, [fixedColumnCount, maxWidth, setColumnDataList]);\n\n  const currentIndex = ref.current?.cellIndex ?? INITIAL.INDEX;\n\n  const isFixed = currentIndex < fixedColumnCount;\n\n  const handleDrop = () => {\n    if (\n      draggingColumnIndex !== INITIAL.INDEX &&\n      currentIndex !== INITIAL.INDEX\n    ) {\n      if (!isFixed) {\n        const [draggingColumnData] = columnDataList.splice(\n          draggingColumnIndex ?? INITIAL.INDEX,\n          1,\n        );\n\n        const newColumnDataList = [\n          ...columnDataList.slice(0, currentIndex),\n          draggingColumnData,\n          ...columnDataList.slice(currentIndex),\n        ];\n        setColumnDataList(newColumnDataList);\n\n        if (storageKey) {\n          const columnIndexList = newColumnDataList.map(\n            ({ originalIndex }) => originalIndex,\n          );\n\n          window.localStorage.setItem(\n            storageKey,\n            JSON.stringify(columnIndexList),\n          );\n        }\n      }\n      setDraggingColumnIndex(INITIAL.INDEX);\n      setDropTargetColumnIndex(INITIAL.INDEX);\n\n      setTimeout(() => setHoveredColumnIndex(dropTargetColumnIndex), 33);\n    }\n  };\n\n  const left = columnDataList\n    .slice(0, currentIndex)\n    .reduce((acc, curr) => acc + (curr?.width ?? 0), 0);\n\n  const isDropTarget = !isFixed && dropTargetColumnIndex === currentIndex;\n  const isDragging = !isFixed && draggingColumnIndex === currentIndex;\n  const isLastFixed = currentIndex === fixedColumnCount - 1;\n  const isHovered = hoveredColumnIndex === currentIndex;\n\n  return (\n    <th\n      style={{\n        left,\n      }}\n      className={cleanClassName(\n        `${styles.title} ${isFixed && styles.fixed} ${\n          isLastFixed && isHorizontalScrolled && styles.shadow\n        } ${isHovered && styles.hovered} ${\n          isDropTarget &&\n          (isDragging ||\n            ((draggingColumnIndex ?? 0) > dropTargetColumnIndex\n              ? styles['drop-left']\n              : styles['drop-right']))\n        } ${isDragging && (isDropTarget ? styles.restoring : styles.dragging)} \n  \n          } ${\n            isDragging && (isDropTarget ? styles.restoring : styles.dragging)\n          } ${className}`,\n      )}\n      ref={ref}\n      draggable={!isFixed}\n      onMouseEnter={() =>\n        setHoveredColumnIndex(\n          draggingColumnIndex === INITIAL.INDEX ? currentIndex : INITIAL.INDEX,\n        )\n      }\n      onMouseLeave={() => setHoveredColumnIndex(INITIAL.INDEX)}\n      onDragOver={(e) => e.preventDefault()}\n      onDragStart={() => setDraggingColumnIndex(currentIndex)}\n      onDragEnter={() => setDropTargetColumnIndex(currentIndex)}\n      onDrop={handleDrop}\n    >\n      <div\n        className={styles['title-content']}\n        style={{\n          maxWidth,\n        }}\n      >\n        {children}\n      </div>\n    </th>\n  );\n};\n","import type { ReactNode } from 'react';\n\nimport { tableDataObserver, useTableData } from '@contexts/TableContext';\nimport type { TableObserverProps } from '@contexts/TableContext';\nimport { cleanClassName } from '@utils';\n\nimport { TableBody } from './TableBody';\nimport { TableCell } from './TableCell';\nimport { TableHeader } from './TableHeader';\nimport { TableRow } from './TableRow';\nimport { TableTitle } from './TableTitle';\nimport styles from './index.module.scss';\n\nexport type { TableHeaderProps } from './TableHeader';\nexport type { TableTitleProps } from './TableTitle';\nexport type { TableRowProps } from './TableRow';\nexport type { TableCellProps } from './TableCell';\nexport type { TableBodyProps } from './TableBody';\n\nexport interface TableProps\n  extends Partial<Pick<TableObserverProps, 'fixedColumnCount' | 'storageKey'>> {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const Table = Object.assign(\n  tableDataObserver(({ className, children }: TableProps) => {\n    const {\n      isHorizontalScrolledState: [, setIsHorizontalScrolled],\n      isReady,\n    } = useTableData();\n\n    return (\n      <article\n        className={cleanClassName(\n          `${styles.table} ${\n            isReady ? styles.ready : styles.hidden\n          } ${className}`,\n        )}\n        onScroll={(e) =>\n          setIsHorizontalScrolled(e.currentTarget.scrollLeft > 0)\n        }\n      >\n        <table>{children}</table>\n      </article>\n    );\n  }),\n  {\n    Header: TableHeader,\n    Title: TableTitle,\n    Body: TableBody,\n    Row: TableRow,\n    Cell: TableCell,\n  },\n);\n"],"names":["_extends","target","i","source","key","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","sourceKeys","Copy","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","PropTypes","Copy$1","INDEX","TableContext","createContext","tableDataObserver","TableComponent","props","fixedColumnCount","storageKey","columnDataListState","useState","draggingColumnIndexState","INITIAL.INDEX","hoveredColumnIndexState","dropTargetColumnIndexState","isReady","setIsReady","ready","useMemo","debounce","isHorizontalScrolledState","tableContextValue","jsx","useTableData","useContext","TableBody","children","className","TableCell","onCopy","hoverStyle","columnDataList","hoveredColumnIndex","draggingColumnIndex","dropTargetColumnIndex","isHorizontalScrolled","useRef","currentIndex","_a","maxWidth","left","acc","curr","isHovered","setIsHovered","isFixed","isDropTarget","isDragging","isLastFixed","isTitleHovered","isOverflow","setOverflow","mouseEventHandler","currentTarget","isOverflow2","cleanClassName","styles","jsxs","Button","childrenString","nodeToString","TableHeader","setColumnDataList","titleCount","Children","useEffect","initialColumnDataList","_","originalIndex","savedColumnIndexListString","savedColumnIndexList","columnData","childrenArray","TableRow","TableTitle","setHoveredColumnIndex","setDraggingColumnIndex","setDropTargetColumnIndex","currentIndex2","isTrackingRequired","updateColumnWidth","maxWidth2","width","prevColumnDataList","newColumnDataList","observer","entry","handleDrop","draggingColumnData","columnIndexList","e","Table","setIsHorizontalScrolled"],"mappings":"8WAAA,SAASA,GAAW,CAAE,OAAAA,EAAW,OAAO,QAAU,SAAUC,EAAQ,CAAE,QAASC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CAAE,IAAIC,EAAS,UAAUD,CAAC,EAAG,QAASE,KAAOD,EAAc,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAAKH,EAAOG,CAAG,EAAID,EAAOC,CAAG,EAAQ,CAAC,OAAOH,GAAkBD,EAAS,MAAM,KAAM,SAAS,CAAI,CAE7T,SAASK,GAAyBF,EAAQG,EAAU,CAAE,GAAIH,GAAU,KAAM,MAAO,GAAI,IAAIF,EAASM,GAA8BJ,EAAQG,CAAQ,EAAOF,EAAKF,EAAG,GAAI,OAAO,sBAAuB,CAAE,IAAIM,EAAmB,OAAO,sBAAsBL,CAAM,EAAG,IAAKD,EAAI,EAAGA,EAAIM,EAAiB,OAAQN,IAAOE,EAAMI,EAAiBN,CAAC,EAAO,EAAAI,EAAS,QAAQF,CAAG,GAAK,IAAkB,OAAO,UAAU,qBAAqB,KAAKD,EAAQC,CAAG,IAAaH,EAAOG,CAAG,EAAID,EAAOC,CAAG,EAAI,CAAG,OAAOH,CAAS,CAE5e,SAASM,GAA8BJ,EAAQG,EAAU,CAAE,GAAIH,GAAU,KAAM,MAAO,CAAE,EAAE,IAAIF,EAAS,CAAE,EAAMQ,EAAa,OAAO,KAAKN,CAAM,EAAOC,EAAKF,EAAG,IAAKA,EAAI,EAAGA,EAAIO,EAAW,OAAQP,IAAOE,EAAMK,EAAWP,CAAC,EAAO,EAAAI,EAAS,QAAQF,CAAG,GAAK,KAAaH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAAK,OAAOH,CAAS,CAInT,IAAIS,EAAOC,EAAU,WAAC,SAAUC,EAAMC,EAAK,CACzC,IAAIC,EAAaF,EAAK,MAClBG,EAAQD,IAAe,OAAS,eAAiBA,EACjDE,EAAYJ,EAAK,KACjBK,EAAOD,IAAc,OAAS,GAAKA,EACnCE,EAAOb,GAAyBO,EAAM,CAAC,QAAS,MAAM,CAAC,EAE3D,OAAoBO,EAAM,cAAc,MAAOnB,EAAS,CACtD,IAAKa,EACL,MAAO,6BACP,MAAOI,EACP,OAAQA,EACR,QAAS,YACT,KAAM,OACN,OAAQF,EACR,YAAa,IACb,cAAe,QACf,eAAgB,OACjB,EAAEG,CAAI,EAAgBC,EAAM,cAAc,OAAQ,CACjD,EAAG,IACH,EAAG,IACH,MAAO,KACP,OAAQ,KACR,GAAI,IACJ,GAAI,GACR,CAAG,EAAgBA,EAAM,cAAc,OAAQ,CAC3C,EAAG,yDACJ,CAAA,CAAC,CACJ,CAAC,EACDT,EAAK,UAAY,CACf,MAAOU,EAAU,OACjB,KAAMA,EAAU,UAAU,CAACA,EAAU,OAAQA,EAAU,MAAM,CAAC,CAChE,EACAV,EAAK,YAAc,OACnB,MAAAW,GAAeX,EC1CFY,EAAQ,GCiCrBC,EAAAC,EAAAA,cAAA,MAAA,EAMOC,EAAAC,GAC0BC,GAAA,CAG7B,KAAA,CAAA,iBAAAC,EAAA,EAAA,WAAAC,CAAA,EAAAF,EAEAG,EAAAC,WAAA,CAAA,CAAA,EACAC,EAAAD,WAAAE,CAAA,EACAC,EAAAH,WAAAE,CAAA,EACAE,EAAAJ,WAAAE,CAAA,EACA,CAAAG,EAAAC,CAAA,EAAAN,EAAA,SAAA,EAAA,EAEAO,EAAAC,EAAA,QAAc,IAAAC,EAAA,IAAA,CAGRH,EAAA,EAAA,CAAe,EAAA,GAAA,EACX,CAAA,CACP,EAGHD,GACEE,IAGF,MAAAG,EAAAV,WAAA,EAAA,EAEAW,EAAAH,EAAA,QAA0B,KAAA,CACjB,oBAAAT,EACL,yBAAAE,EACA,wBAAAE,EACA,2BAAAC,EACA,iBAAAP,EACA,0BAAAa,EACA,WAAAZ,EACA,QAAAO,CACA,GACF,CACAN,EACEE,EACAG,EACAP,EACAM,EACAO,EACAZ,EACAO,CACA,CACF,EAGF,OAAAO,EAAA,IAAApB,EAAA,SAAA,CAAA,MAAAmB,EAAA,SAAAC,EAAAA,IAAAjB,EAAA,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA,CAGE,EAICiB,EAAA,IAAA,CACL,MAAAF,EAAAG,aAAAtB,CAAA,EACA,GAAA,CAAAmB,EACE,MAAA,IAAA,MAAA,2BAAA,EAGF,OAAAA,CACF,wHCjGO,MAAAI,EAAA,CAAA,CAAA,SAAAC,EAAA,UAAAC,CAAA,IAAAL,MAAA,QAAA,CAAA,UAAAK,EAAA,SAAAD,CAAA,CAAA,wqDCaAE,EAAA,CAAA,CAAmB,SAAAF,EACxB,OAAAG,EACA,UAAAF,EACA,WAAAG,CAEF,IAAA,OACE,KAAA,CAAM,oBAAA,CAAAC,CAAA,EACgC,wBAAA,CAAAC,CAAA,EACQ,yBAAA,CAAAC,CAAA,EACE,2BAAA,CAAAC,CAAA,EACI,0BAAA,CAAAC,CAAA,EACF,iBAAA5B,EAChD,QAAAQ,CACA,EAAAQ,EAAA,EAGF/B,EAAA4C,SAAA,IAAA,EACAC,IAAAC,EAAA9C,EAAA,UAAA,YAAA8C,EAAA,YAAA1B,EAEA,CAAA,SAAA2B,CAAA,EAAAR,EAAAM,GAAA,CAAA,GAAA,GAEAG,EAAAT,EAAA,MAAA,EAAAM,CAAA,EAAA,OAAA,CAAAI,EAAAC,IAAAD,IAAAC,GAAA,YAAAA,EAAA,QAAA,GAAA,CAAA,EAIA,CAAAC,EAAAC,CAAA,EAAAlC,EAAA,SAAA,EAAA,EAEAmC,EAAAR,EAAA9B,EACAuC,EAAA,CAAAD,GAAAX,IAAAG,EACAU,EAAA,CAAAF,GAAAZ,IAAAI,EACAW,EAAAX,IAAA9B,EAAA,EACA0C,EAAAjB,IAAAK,EACA,CAAAa,EAAAC,CAAA,EAAAzC,EAAA,SAAA,EAAA,EAEA0C,EAAArC,EAAA,CACI,aAAA,CAAA,CAAA,cAAAsC,KAAA,CAEI,MAAAC,EAAAD,EAAA,YAAAA,EAAA,aAGAC,GAAAzB,IACEe,EAAA,EAAA,EAGFU,GACEH,EAAA,EAAA,CACF,EACF,aAAA,IAAAP,EAAA,EAAA,CACsC,EAAA,GAI5C,OAAAtB,EAAA,IACE,KAAC,CAAA,IAAA9B,EACC,MAAA,CACO,KAAAgD,CACL,EACF,UAAAe,EACW,GAAAC,EAAA,IAAA,IAAAX,GAAAW,EAAA,KAAA,IAAAR,GAAAb,GAAAqB,EAAA,MAAA,IAAAP,GAAAO,EAAA,OAAA,IAAAV,IAAAC,KAAAd,GAAA,GAAAC,EAAAsB,EAAA,WAAA,EAAAA,EAAA,YAAA,GAAA,IAAAT,IAAAD,EAAAU,EAAA,UAAAA,EAAA,SAAA,IAAA7B,CAAA,EAWI,EACf,SAAA8B,EAAA,KAEA,MAAC,CAAA,GAAAL,EACK,MAAA,CACG,SAAAb,CACL,EACF,UAAA,GAAAiB,EAAA,wBAAA,CAAA,IAAAN,EAAAM,EAAA,SAAAA,EAAA,cAAA,CAAA,GAGA,SAAA,CAECb,EAAArB,EAAAA,IAAA,MAAA,CAAA,UAAAkC,EAAA,OAAA,SAAA9B,CAAA,CAAA,EAAAA,EAA8DiB,EAAAc,EAAA,KAE7D,MAAC,CAAA,UAAAF,EACY,GAAAC,EAAA,2BAAA,CAAA,IAAA1B,GAAA0B,EAAA,WAAA,CAAA,EAGT,EACF,MAAA1B,EACO,SAAA,CAEPR,EAAA,IAAA,MAAA,CAAA,UAAAkC,EAAA,sBAAA,EAAA,SAAA9B,EAAA,EAA0DG,EAAAP,EAAAA,IAAA,MAAA,CAAA,UAAAkC,EAAA,kBAAA,EAAA,SAAAlC,EAAA,IAGtDoC,GAAC,CAAA,KAAA,UACM,MAAA,OACC,MAAA,mBACA,KAAApC,EAAAA,IAAAjC,GAAA,CAAA,KAAA,EAAA,CAAA,EACgB,QAAA,IAAA,CAEpB,MAAAsE,EAAAC,GAAAlC,CAAA,EACA,UAAA,UAAA,UAAAiC,CAAA,EACA9B,GAAA,MAAAA,EAAA8B,EAAuB,CACzB,CAAA,CAAA,CAAA,EAAA,IAGF,CAAA,CAAA,EAAA,IAEJ,CAAA,CAAA,CACN,CAAA,CAGN,oeCrHOE,EAAA,CAAA,CAAA,SAAAnC,EAAA,UAAAC,KAAA,CACL,KAAA,CAAM,oBAAA,CAAAI,EAAA+B,CAAA,EACmD,WAAAtD,CACvD,EAAAe,EAAA,EAEFwC,EAAAC,EAAAA,SAAA,MAAAtC,CAAA,EAEAuC,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,MAAA,KAAoC,CAClC,OAAAH,CACU,EACV,CAAAI,EAAAC,KAAA,CACuB,cAAAA,CACrB,EACF,EAGF,GAAA5D,EAAA,CACE,MAAA6D,EAAA,OAAA,aAAA,QAAA7D,CAAA,EAGA,GAAA6D,EAAA,CACE,MAAAC,EAAA,KAAA,MAAwDD,CACtD,GAGFC,GAAA,YAAAA,EAAA,UAAAP,EACE,OAAA,aAAA,WAAAvD,CAAA,EAEA0D,EAAA,QAAA,CAAAK,EAAAH,IAAA,CACEG,EAAA,cAAAD,EAAAF,CAAA,CAA6D,CAAA,CAEjE,CACF,CAGFN,EAAAI,CAAA,CAAuC,EAAA,CAAAJ,EAAAtD,EAAAuD,CAAA,CAAA,EAGzC,MAAAS,EAAAR,EAAAA,SAAA,QAAAtC,CAAA,EAEA,OAAAJ,EAAAA,IAAA,QAAA,CAAA,UAAAiC,EAAA,GAAAC,GAAA,MAAA,IAAA7B,CAAA,EAAA,EAAA,SAAAL,EAAAA,IAAA,KAAA,CAAA,SAAAS,EAAA,IAGsB,CAAA,CAAA,cAAAqC,CAAA,IAAAI,EAAAJ,CAAA,CACoC,CAAA,CAAA,CAAA,CAAA,CAK5D,8+BCnDOK,EAAA,CAAA,CAAA,SAAA/C,EAAA,UAAAC,KAAA,CACL,KAAA,CAAM,oBAAA,CAAAI,CAAA,CACgC,EAAAR,EAAA,EAGtCiD,EAAAR,EAAAA,SAAA,QAAAtC,CAAA,EAEA,OAAAJ,EAAA,IAAA,KAAA,CAAA,UAAAiC,EAAA,GAAAC,GAAA,GAAA,IAAA7B,CAAA,EAAA,EAAA,SAAAI,EAAA,IAAA,CAAA,CAAA,cAAAqC,CAAA,IAAAI,EAAAJ,CAAA,CAAA,CAAA,CAAA,CAKF,6wCCROM,EAAA,CAAA,CAAoB,SAAAhD,EACzB,UAAAC,EACA,SAAAY,CAEF,IAAA,OACE,KAAA,CAAM,oBAAA,CAAAR,EAAA+B,CAAA,EACmD,wBAAA,CAAA9B,EAAA2C,CAAA,EACY,yBAAA,CAAA1C,EAAA2C,CAAA,EACG,2BAAA,CAC1C1C,EAC1B2C,CACA,EACF,iBAAAtE,EACA,0BAAA,CAAA4B,CAAA,EACgD,WAAA3B,CAChD,EAAAe,EAAA,EAGF/B,EAAA4C,SAAA,IAAA,EAEA6B,EAAAA,UAAA,IAAA,OACE,MAAAa,IAAAxC,EAAA9C,EAAA,UAAA,YAAA8C,EAAA,YAAA1B,EACA,GAAAkE,IAAAlE,GAAApB,EAAA,QAAA,CACE,MAAAuF,EAAAD,EAAAvE,EAAA,EACAyE,EAAA,CAAAC,EAAAC,IAAA,CACEpB,EAAAqB,GAAA,CACE,MAAAC,EAAA,CAAA,GAAAD,CAAA,EACAZ,EAAAa,EAAAN,CAAA,EACA,OAAAP,IACEA,EAAA,MAAAW,EACAX,EAAA,SAAAU,GAGFG,CAAO,CAAA,CACR,EAGH,GAAAL,EAAA,CACE,MAAAM,EAAA,IAAA,eAAA,CAAA,CAAAC,CAAA,IAAA,CACEN,EAAAzC,EAAA+C,EAAA,YAAA,KAAA,CAAmD,CAAA,EAGrD,OAAAD,EAAA,QAAA7F,EAAA,OAAA,EAEA,IAAA6F,EAAA,YAAiC,CAGnCL,EAAAzC,CAAA,CAA0B,CAC5B,EAAA,CAAAhC,EAAAgC,EAAAuB,CAAA,CAAA,EAGF,MAAAzB,IAAAC,EAAA9C,EAAA,UAAA,YAAA8C,EAAA,YAAA1B,EAEAiC,EAAAR,EAAA9B,EAEAgF,EAAA,IAAA,CACE,GAAAtD,IAAArB,GAAAyB,IAAAzB,EAAA,CAIE,GAAA,CAAAiC,EAAA,CACE,KAAA,CAAA2C,CAAA,EAAAzD,EAAA,OAA4CE,GAAArB,EACX,CAC/B,EAGFwE,EAAA,CAA0B,GAAArD,EAAA,MAAA,EAAAM,CAAA,EACemD,EACvC,GAAAzD,EAAA,MAAAM,CAAA,CACoC,EAItC,GAFAyB,EAAAsB,CAAA,EAEA5E,EAAA,CACE,MAAAiF,EAAAL,EAAA,IAA0C,CAAA,CAAA,cAAAhB,CAAA,IAAAA,CACjB,EAGzB,OAAA,aAAA,QAAoB5D,EAClB,KAAA,UAAAiF,CAAA,CAC8B,CAChC,CACF,CAEFb,EAAAhE,CAAA,EACAiE,EAAAjE,CAAA,EAEA,WAAA,IAAA+D,EAAAzC,CAAA,EAAA,EAAA,CAAiE,CACnE,EAGFM,EAAAT,EAAA,MAAA,EAAAM,CAAA,EAAA,OAAA,CAAAI,EAAAC,IAAAD,IAAAC,GAAA,YAAAA,EAAA,QAAA,GAAA,CAAA,EAIAI,EAAA,CAAAD,GAAAX,IAAAG,EACAU,EAAA,CAAAF,GAAAZ,IAAAI,EACAW,EAAAX,IAAA9B,EAAA,EACAoC,EAAAX,IAAAK,EAEA,OAAAf,EAAA,IACE,KAAC,CAAA,MAAA,CACQ,KAAAkB,CACL,EACF,UAAAe,EACW,GAAAC,EAAA,KAAA,IAAAX,GAAAW,EAAA,KAAA,IAAAR,GAAAb,GAAAqB,EAAA,MAAA,IAAAb,GAAAa,EAAA,OAAA,IAAAV,IAAAC,KAAAd,GAAA,GAAAC,EAAAsB,EAAA,WAAA,EAAAA,EAAA,YAAA,GAAA,IAAAT,IAAAD,EAAAU,EAAA,UAAAA,EAAA,SAAA;AAAA;AAAA,cAS4DT,IAAAD,EAAAU,EAAA,UAAAA,EAAA,SAAA,IAAA7B,CAAA,EAItD,EACjB,IAAAnC,EACA,UAAA,CAAAqD,EACY,aAAA,IAAA8B,EAEV1C,IAAArB,EAAAyB,EAAAzB,CACiE,EACjE,aAAA,IAAA+D,EAAA/D,CAAA,EAEqD,WAAA8E,GAAAA,EAAA,eAAA,EACnB,YAAA,IAAAd,EAAAvC,CAAA,EACkB,YAAA,IAAAwC,EAAAxC,CAAA,EACE,OAAAkD,EAChD,SAAAjE,EAAA,IAER,MAAC,CAAA,UAAAkC,EAAA,eAAA,EACkC,MAAA,CAC1B,SAAAjB,CACL,EACF,SAAAb,CAEC,CAAA,CACH,CAAA,CAGN,+pCCtIOiE,EAAA,OAAA,OAAqBvF,EAAA,CAAA,CAAA,UAAAuB,EAAA,SAAAD,KAAA,CAExB,KAAA,CAAM,0BAAA,CAAA,CAAAkE,CAAA,EACiD,QAAA7E,CACrD,EAAAQ,EAAA,EAGF,OAAAD,EAAA,IACE,UAAC,CAAA,UAAAiC,EACY,GAAAC,EAAA,KAAA,IAAAzC,EAAAyC,EAAA,MAAAA,EAAA,MAAA,IAAA7B,CAAA,EAGI,EACf,SAAA+D,GAAAE,EAAAF,EAAA,cAAA,WAAA,CAAA,EAEwD,SAAApE,EAAA,IAAA,QAAA,CAAA,SAAAI,CAAA,CAAA,CAGvC,CAAA,CACnB,CAAA,EAEH,CACD,OAAAmC,EACU,MAAAa,EACD,KAAAjD,EACD,IAAAgD,EACD,KAAA7C,CACC,CAEV","x_google_ignoreList":[0]}