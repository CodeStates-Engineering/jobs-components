{"version":3,"file":"index-41601980.js","sources":["../../../src/components/molecules/TabMenu/index.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\nimport styles from './index.module.scss';\nimport { Compatibility } from '../../../plugins';\nimport { Button, Hr } from '../../atoms';\n\nimport type { ButtonProps, HrProps } from '../../atoms';\n\ninterface Item {\n  label: string;\n  path?: string;\n  to?: string;\n}\n\ninterface TabMenuItem extends Item {\n  onClick?: (item: Item) => void;\n  disabled?: boolean;\n}\n\nexport interface TabMenuProps {\n  items?: TabMenuItem[];\n  itemSize?: ButtonProps['size'];\n  itemShape?: ButtonProps['shape'];\n  bottomLineWeight?: HrProps['weight'] | 'none';\n  fontWeight?: ButtonProps['fontWeight'];\n  fontSize?: ButtonProps['fontSize'];\n  variant?: {\n    default: ButtonProps['variant'];\n    selected: ButtonProps['variant'];\n  };\n  color?: {\n    default: ButtonProps['color'];\n    selected: ButtonProps['color'];\n  };\n  selectedLineWeight?: HrProps['weight'] | 'none';\n  selectedLineColor?: HrProps['color'];\n  className?: string;\n}\n\nexport const TabMenu = ({\n  items,\n  itemSize = 'large',\n  itemShape = '8',\n  bottomLineWeight = 'medium',\n  selectedLineWeight = 'medium',\n  variant = {\n    default: 'ghost',\n    selected: 'ghost',\n  },\n  color = {\n    default: 'bluishGray300',\n    selected: 'bluishGray700',\n  },\n  selectedLineColor = 'purple-550',\n  fontWeight = 700,\n  fontSize = 'large',\n  className,\n}: TabMenuProps) => {\n  const { pathname, search } = Compatibility.useLocation();\n  const queryStrings = useMemo(\n    () => (search ? search.replace('?', '')?.split('&') : []),\n    [search],\n  );\n\n  const baseItemButtonProps: ButtonProps = {\n    fontSize,\n    fontWeight,\n    size: itemSize,\n    shape: itemShape,\n    className: styles['tab-menu-link'],\n  };\n\n  return (\n    <nav className={className}>\n      <ul className={styles['tab-menu']}>\n        {items?.map(({ onClick, disabled, ...item }, index) => {\n          const { label, to } = item;\n\n          const path = to ?? item.path;\n\n          const isMatched = (() => {\n            if (!path) {\n              return true;\n            }\n\n            const [tabPathname, tabSearch = undefined] = path.split('?');\n\n            return (\n              (pathname === tabPathname &&\n                tabSearch\n                  ?.split('&')\n                  .every((itemQueryString) =>\n                    queryStrings.includes(itemQueryString),\n                  )) ??\n              true\n            );\n          })();\n\n          const itemButtonProps: ButtonProps = {\n            ...baseItemButtonProps,\n            ...(isMatched\n              ? { theme: color.selected, variant: variant.selected }\n              : { theme: color.default, variant: variant.default }),\n            children: label,\n            onClick: () => onClick?.(item),\n            disabled,\n          };\n\n          return (\n            <li key={index}>\n              <div className={styles['tab-menu-link-wrap']}>\n                {to && !disabled ? (\n                  <Compatibility.Link to={to}>\n                    <Button {...itemButtonProps} />\n                  </Compatibility.Link>\n                ) : (\n                  <Button {...itemButtonProps} />\n                )}\n              </div>\n              {isMatched && (\n                <div className={styles['selected-line-wrap']}>\n                  {selectedLineWeight === 'none' ? null : (\n                    <Hr weight={selectedLineWeight} color={selectedLineColor} />\n                  )}\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n      {bottomLineWeight === 'none' ? null : <Hr weight={bottomLineWeight} />}\n    </nav>\n  );\n};\n"],"names":["TabMenu","items","itemSize","itemShape","bottomLineWeight","selectedLineWeight","variant","color","selectedLineColor","fontWeight","fontSize","className","pathname","search","Compatibility","queryStrings","useMemo","_a","baseItemButtonProps","styles","jsxs","jsx","onClick","disabled","item","index","label","to","path","isMatched","tabPathname","tabSearch","itemQueryString","itemButtonProps","Button","Hr"],"mappings":"grCAuCOA,EAAA,CAAA,CAAiB,MAAAC,EACtB,SAAAC,EAAA,QACW,UAAAC,EAAA,IACC,iBAAAC,EAAA,SACO,mBAAAC,EAAA,SACE,QAAAC,EAAA,CACX,QAAA,QACC,SAAA,OACC,EACZ,MAAAC,EAAA,CACQ,QAAA,gBACG,SAAA,eACC,EACZ,kBAAAC,EAAA,aACoB,WAAAC,EAAA,IACP,SAAAC,EAAA,QACF,UAAAC,CAEb,IAAA,CACE,KAAA,CAAA,SAAAC,EAAA,OAAAC,CAAA,EAAAC,EAAA,YAAA,EACAC,EAAAC,EAAA,QAAqB,WAAA,OAAAH,GAAAI,EAAAJ,EAAA,QAAA,IAAA,EAAA,IAAA,YAAAI,EAAA,MAAA,KAAA,CAAA,GACoC,CAAAJ,CAAA,CAChD,EAGTK,EAAA,CAAyC,SAAAR,EACvC,WAAAD,EACA,KAAAP,EACM,MAAAC,EACC,UAAAgB,EAAA,eAAA,CAC0B,EAGnC,OAAAC,OAAA,MAAA,CAAA,UAAAT,EAAA,SAAA,CAEIU,EAAA,IAAA,KAAA,CAAA,UAAAF,EAAA,UAAA,EAAA,SAAAlB,GAAA,YAAAA,EAAA,IAAA,CAAA,CAAA,QAAAqB,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAEI,KAAA,CAAA,MAAAC,EAAA,GAAAC,CAAA,EAAAH,EAEAI,EAAAD,GAAAH,EAAA,KAEAK,GAAA,IAAA,CACE,GAAA,CAAAD,EACE,MAAA,GAGF,KAAA,CAAAE,EAAAC,EAAA,MAAA,EAAAH,EAAA,MAAA,GAAA,EAEA,OAAAhB,IAAAkB,IAAAC,GAAA,YAAAA,EAAA,MAAA,KAAA,MAIOC,GAAAjB,EAAA,SAAAiB,CAAA,MACsC,EAE3C,KAIJC,EAAA,CAAqC,GAAAf,EAChC,GAAAW,EAAA,CAAA,MAAAtB,EAAA,SAAA,QAAAD,EAAA,QAAA,EAAA,CAAA,MAAAC,EAAA,QAAA,QAAAD,EAAA,OAAA,EAGkD,SAAAoB,EAC3C,QAAA,IAAAJ,GAAA,YAAAA,EAAAE,GACmB,SAAAD,CAC7B,EAGF,OAAAH,EAAA,KAAA,KAAA,CAAA,SAAA,CAEIC,EAAAA,IAAA,MAAA,CAAA,UAAAF,EAAA,oBAAA,EAAA,SAAAQ,GAAA,CAAAJ,EAAAF,MAAAP,EAAA,KAAA,CAAA,GAAAa,EAAA,SAAAN,EAAAA,IAAAa,EAAA,CAAA,GAAAD,CAAA,CAAA,CAAA,CAAA,EAAAZ,EAAAA,IAAAa,EAAA,CAAA,GAAAD,CAAA,CAAA,CAAA,CAAA,EAQAJ,GAAAR,EAAAA,IAAA,MAAA,CAAA,UAAAF,EAAA,oBAAA,EAAA,SAAAd,IAAA,OAAA,KAAAgB,EAAAA,IAAAc,EAAA,CAAA,OAAA9B,EAAA,MAAAG,CAAA,CAAA,EAAA,CAME,CAAA,EAAAiB,CAAA,CAEJ,GAAA,EAGNrB,IAAA,OAAA,KAAAiB,EAAAA,IAAAc,EAAA,CAAA,OAAA/B,EAAA,CACoE,CAAA,CAAA,CAG1E;;;;;;"}